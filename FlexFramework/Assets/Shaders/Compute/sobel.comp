#version 430
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(location = 0) uniform sampler2D normalTexture;
layout(location = 1) uniform sampler2D colorTexture;
layout(rgba16f, binding = 0) uniform image2D outputImage;

void make_kernel(inout vec4 n[9], sampler2D tex, vec2 coord, vec2 pixSize) {
    float w = pixSize.x;
    float h = pixSize.y;
    
    n[0] = texture2D(tex, coord + vec2( -w, -h));
    n[1] = texture2D(tex, coord + vec2(0.0, -h));
    n[2] = texture2D(tex, coord + vec2(  w, -h));
    n[3] = texture2D(tex, coord + vec2( -w, 0.0));
    n[4] = texture2D(tex, coord);
    n[5] = texture2D(tex, coord + vec2(  w, 0.0));
    n[6] = texture2D(tex, coord + vec2( -w, h));
    n[7] = texture2D(tex, coord + vec2(0.0, h));
    n[8] = texture2D(tex, coord + vec2(  w, h));
}

void main() {
    ivec2 size = imageSize(outputImage);
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 pixelSize = 1.0 / vec2(size);
    vec2 texCoord = pixelCoord / vec2(size) + pixelSize * 0.5;

    vec4 n[9];
    make_kernel(n, normalTexture, texCoord, pixelSize);

    vec4 sobelEdgeH = n[2] + (2.0*n[5]) + n[8] - (n[0] + (2.0*n[3]) + n[6]);
    vec4 sobelEdgeV = n[0] + (2.0*n[1]) + n[2] - (n[6] + (2.0*n[7]) + n[8]);
    vec4 sobel = sqrt((sobelEdgeH * sobelEdgeH) + (sobelEdgeV * sobelEdgeV));
    vec3 sobelColor = vec3(1.0) - sobel.rgb;
    float avg = (sobelColor.r + sobelColor.g + sobelColor.b) / 3.0;
    avg = smoothstep(0.0, 0.5, avg);
    vec3 color = texture2D(colorTexture, texCoord).rgb * avg;
    imageStore(outputImage, pixelCoord, vec4(color, 1.0));
}